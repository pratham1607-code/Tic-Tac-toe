/* eslint-disable */
// https://es6console.com/
(function() {
  window.__CLEAR_CACHE_DONE = window.localStorage.getItem('__CLEAR_CACHE_DONE');
  if (window.__CLEAR_CACHE_DONE) {
    window.localStorage.removeItem('__CLEAR_CACHE_DONE');
    window.location.href = window.location.pathname;
    return;
  }
  window.__CLEAR_CACHE =
    (window.location.search || '').indexOf('clear-cache=true') > -1;

  if (!window.__CLEAR_CACHE) {
    return;
  }

  if (navigator.serviceWorker && navigator.serviceWorker.getRegistrations) {
    navigator.serviceWorker
      .getRegistrations()
      .then(registrations => {
        return Promise.all(
          Array.from(registrations).map(item => {
            return item.unregister();
          })
        );
      })
      .then(() => {
        if (window.caches) {
          return window.caches.keys().then(names => {
            return Promise.all(
              Array.from(names).map(name => {
                return window.caches.delete(name);
              })
            );
          });
        }
      })
      .then(() => {
        window.localStorage.setItem('__CLEAR_CACHE_DONE', 'true');
        window.location.reload(true);
      })
      .catch(console.error);
  }
})();

(function() {
  window.__REPORT_BUG =
    (window.location.search || '').indexOf('report-bug=true') > -1;

  if (!window.__REPORT_BUG) {
    return;
  }

  var errorObj = {};

  var key = 'error-handler:data';

  window.localStorage.removeItem(key);

  var errorHandler = function errorHandler(event) {
    try {
      event.preventDefault && event.preventDefault();
      var error = event.error || event.reason;
      if (!error) {
        return;
      }

      errorObj.ver = Math.random();
      errorObj.data = errorObj.data || {};
      errorObj.data.errors = errorObj.data.errors || [];
      if (errorObj.data.errors.length > 10) {
        return;
      }
      errorObj.data.errors.push(
        (error.stack || error.message || '').split('\n')
      );

      window.localStorage.setItem(key, JSON.stringify(errorObj));
    } catch (e) {
      console.error(e);
    }
  };

  console._error = console.error;
  console.error = function error() {
    var _console;

    for (
      var _len = arguments.length, params = Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      params[_key] = arguments[_key];
    }

    (_console = console)._error.apply(_console, params);
    params.forEach(function(param) {
      if (param instanceof Error) {
        errorHandler({ error: param });
      }
    });
  };
  window.addEventListener('unhandledrejection', errorHandler);
  window.addEventListener('error', errorHandler);
})();
